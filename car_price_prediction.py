# -*- coding: utf-8 -*-
"""Car Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13lf9Q4QZ30JU40RCad33wreslX5uicFT

Importing the Dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Collection and Processing"""

#loading the data from csv file to pandas data frame
car_dataset = pd.read_csv('/content/car_data.csv')

#Inspecting the first 5 rows of dataset
car_dataset.head()

car_dataset.shape

#getting some information about the dataset
car_dataset.info()

#checking number of missing values
car_dataset.isnull().sum()

#checking the distribution of categorical data
print(car_dataset.fuel.value_counts())
print(car_dataset.seller_type.value_counts())
print(car_dataset.transmission.value_counts())
print(car_dataset.owner.value_counts())

"""Encoding the Categorical Data"""

#encoding "fuel" column
car_dataset.replace({'fuel':{'Petrol':0,'Diesel':1,'CNG':2,'LPG':3,'Electric':1}},inplace=True)

#encoding "seller_type" column
car_dataset.replace({'seller_type':{'Individual':0,'Dealer':1,'Trustmark Dealer':2}},inplace=True)

#encoding "transmission" column
car_dataset.replace({'transmission':{'Manual':0,'Automatic':1}},inplace=True)

#encoding "owner" column
car_dataset.replace({'owner':{'First Owner':0,'Second Owner':1,'Third Owner':2,'Fourth & Above Owner':3,'Test Drive Car':4}},inplace=True)

car_dataset.head()

"""Splitting data and target"""

X = car_dataset.drop(['name','selling_price'],axis=1)
Y = car_dataset['selling_price']

print(X)

print(Y)

"""Splitting Training and Test Data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

"""Model Training

1.Linear Regression
"""

#loading the linear Regression model
lin_reg_model= LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

#pediction on training data
training_data_prediction=lin_reg_model.predict(X_train)

#R squared Error
error_score=metrics.r2_score(Y_train,training_data_prediction)
print("R squared Error :",error_score)

"""Visualize the actual prices and Predicted prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

#pediction on test data
test_data_prediction=lin_reg_model.predict(X_test)

#R squared Error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print("R squared Error :",error_score)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

"""Lasso Regression"""

#loading the lasso Regression model
las_reg_model= Lasso()

las_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

#pediction on training data
training_data_prediction=las_reg_model.predict(X_train)

#R squared Error
error_score=metrics.r2_score(Y_train,training_data_prediction)
print("R squared Error :",error_score)

"""Visualize the actual prices and Predicted prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

#pediction on test data
test_data_prediction=las_reg_model.predict(X_test)

#R squared Error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print("R squared Error :",error_score)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

